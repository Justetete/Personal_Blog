version: '3.8'

services:
  # 服务 1: Spring Boot 应用容器
  myblog-app:
    # 告诉 Docker Compose 使用当前目录下的 Dockerfile 来构建镜像
    build: .
    # 容器名称
    container_name: myblog-container
    # 端口映射: 将主机的 8081 端口映射到容器的 8081 端口
    ports:
      - "8081:8081"
    # 定义环境变量
    environment:
      # 数据库连接配置
      - SPRING_DATASOURCE_URL=jdbc:mysql://mysql-db:3306/myblog_db?useSSL=false&allowPublicKeyRetrieval=true&serverTimezone=UTC
      - SPRING_DATASOURCE_USERNAME=root
      - SPRING_DATASOURCE_PASSWORD=123456
    # 定义容器的依赖关系，确保在 myblog-app 启动之前 mysql-db 已经运行
    depends_on:
      mysql-db:
        condition: service_healthy
    # 重启策略
    restart: on-failure

  # 服务 2: MySQL 数据库容器
  mysql-db:
    # 使用官方的 MySQL 8.0 镜像
    image: mysql:8.0
    # 容器名称
    container_name: myblog-mysql
    # 设置环境变量
    environment:
      # MySQL root 用户的密码
      MYSQL_ROOT_PASSWORD: 123456
      # 自动创建的数据库名称
      MYSQL_DATABASE: myblog_db
      # 设置默认的身份验证插件（解决连接问题）
      MYSQL_ROOT_HOST: '%'
    # 数据卷挂载，用于持久化数据和自动导入 SQL 文件
    volumes:
      # 修正：将你的 sql 文件挂载到容器的 /docker-entrypoint-initdb.d/ 目录
      # 这将使容器在第一次启动时自动执行该脚本
      - ./sql/myblog.sql:/docker-entrypoint-initdb.d/myblog.sql
      # 用于持久化数据库数据
      - myblog-mysql-data:/var/lib/mysql
    # 暴露端口，方便你在本地使用 MySQL Workbench 连接
    ports:
      - "3307:3306"
    # 健康检查
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-p123456"]
      timeout: 20s
      retries: 10
      start_period: 40s
      interval: 10s
    # 启动命令，解决一些连接问题
    command: --default-authentication-plugin=mysql_native_password

# 定义数据卷，用于持久化数据库数据
volumes:
  myblog-mysql-data: